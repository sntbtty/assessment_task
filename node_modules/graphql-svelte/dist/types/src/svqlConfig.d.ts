import { queryType, graphqlOptions } from '..';
import { GraphQL } from './GraphQL';
export declare let client: {
    graphql: GraphQL;
    subscription({ query, variables }: {
        query: string;
        variables?: object;
    }): {
        [x: number]: () => any;
        subscribe(observerOrNext?: any, onError?: any, onComplete?: any): {
            unsubscribe: () => void;
        };
    };
    sub: any;
    mutate({ query, variables, cache, key }: queryType): Promise<any>;
    query({ query, variables, cache, key }: queryType): Promise<any>;
};
export declare function setHeaders(headers: any): void;
export declare function headers(): {
    'content-type': string;
};
/**
 * * Gets default client {@link svqlConfig} for a
 * [GraphQL Client]{@link svqlConfig}.
 * @param {*} url
 * @param {*} wsUrl
 * @param {{
 *   connectionCallback:string
 *   connectionParams:Object,
 *   timeout:number,
 *   reconnect:boolean,
 *   reconnectionAttempts:number,
 *   lazy:boolean,
 *   inactivityTimeout:number
 *   }} options
 */
export declare function getClient({ url, wsUrl, wsOptions, graphqlOptions }: graphqlOptions): {
    graphql: GraphQL;
    subscription({ query, variables }: {
        query: string;
        variables?: object | undefined;
    }): {
        [x: number]: () => any;
        subscribe(observerOrNext?: any, onError?: any, onComplete?: any): {
            unsubscribe: () => void;
        };
    };
    sub: any;
    mutate({ query, variables, cache, key }: queryType): Promise<any>;
    query({ query, variables, cache, key }: queryType): Promise<any>;
};
