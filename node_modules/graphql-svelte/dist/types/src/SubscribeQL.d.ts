import { WSOptions } from "..";
export declare class SubscriptionClient {
    wsImpl: {
        new (url: string, protocols?: string | string[]): WebSocket;
        prototype: WebSocket;
        readonly CLOSED: number;
        readonly CLOSING: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
    };
    connectionCallback: any;
    url: any;
    operations: any;
    nextOperationId: number;
    wsTimeout: any;
    unsentMessagesQueue: any[];
    reconnect: any;
    reconnecting: boolean;
    reconnectionAttempts: any;
    lazy: boolean;
    inactivityTimeout: any;
    closedByUser: boolean;
    backoff: any;
    eventEmitter: {
        <T = any>(type: import("mitt").EventType, event?: T | undefined): void;
        (type: "*", event?: any): void;
    };
    client: any;
    maxConnectTimeGenerator: any;
    connectionParams: () => Promise<unknown>;
    checkConnectionIntervalId: any;
    maxConnectTimeoutId: any;
    tryReconnectTimeoutId: any;
    inactivityTimeoutId: any;
    wasKeepAliveReceived: any;
    constructor(url: any, options?: any);
    get status(): any;
    close(isForced?: boolean, closedByUser?: boolean): void;
    request(request: {
        query: any;
        variables?: object;
    }): {
        [x: number]: () => any;
        subscribe(observerOrNext?: any, onError?: any, onComplete?: any): {
            unsubscribe: () => void;
        };
    };
    on(eventName: string, callback: any, context?: any): void;
    onConnected(callback: any, context?: any): void;
    onConnecting(callback: any, context?: any): void;
    onDisconnected(callback: any, context?: any): void;
    onReconnected(callback: any, context?: any): void;
    onReconnecting(callback: any, context?: any): void;
    onError(callback: any, context?: any): void;
    unsubscribeAll(): void;
    getConnectionParams(connectionParams: unknown): () => Promise<unknown>;
    executeOperation(options: any, handler: (arg0: any) => void): string;
    getObserver(observerOrNext: any, error?: (arg0: any) => any, complete?: () => any): any;
    createMaxConnectTimeGenerator(): any;
    clearCheckConnectionInterval(): void;
    clearMaxConnectTimeout(): void;
    clearTryReconnectTimeout(): void;
    clearInactivityTimeout(): void;
    setInactivityTimeout(): void;
    checkOperationOptions(options: {
        query: any;
        variables: any;
        operationName: any;
    }, handler: any): void;
    buildMessage(id: any, type: string, payload: {
        query: string;
        variables: Object;
    }): {
        id: any;
        type: string;
        payload: {
            query: string;
            variables: Object;
        };
    };
    formatErrors(errors: any): any;
    sendMessage(id: string | undefined, type: string, payload: any): void;
    sendMessageRaw(message: {
        id: any;
        type: any;
        payload: any;
    }): void;
    generateOperationId(): string;
    tryReconnect(): void;
    flushUnsentMessagesQueue(): void;
    checkConnection(): void;
    checkMaxConnectTimeout(): void;
    connect(): void;
    processReceivedData(receivedData: string): void;
    unsubscribe(opId: string): void;
}
export declare function SubscribeQL(url: any, options: WSOptions): SubscriptionClient;
